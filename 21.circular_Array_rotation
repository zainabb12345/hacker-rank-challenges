package main

import (
    "bufio"
    "fmt"
    "io"
    "os"
    "strconv"
    "strings"
    // "math"
)
func Abs(x int32) int32 {
    if x < 0 {
        return -x
    }
    return x
}
func reverse_int(n int32) int32 {
    new_int := int32(0)
    n = Abs(n)
    for n > 0 {
        remainder := n % 10
        new_int *= 10
        new_int += remainder 
        n /= 10
    }
    return new_int 
}
// Complete the beautifulDays function below.
func beautifulDays(i int32, j int32, k int32) int32 {
    var reverse int32
    var difference int32
    var count int32
    var a int32 = i
    for  a <= j {
        
        reverse = reverse_int(a)
        difference = (a - reverse)
        if difference % k == 0 {
            count ++
                fmt.Print("A: ", a, "\n")
                fmt.Print("MOD k : ", difference%k, "\n")
            }
        a++
    }
    
    
    return count
}

func main() {
    reader := bufio.NewReaderSize(os.Stdin, 1024 * 1024)

    stdout, err := os.Create(os.Getenv("OUTPUT_PATH"))
    checkError(err)

    defer stdout.Close()

    writer := bufio.NewWriterSize(stdout, 1024 * 1024)

    ijk := strings.Split(readLine(reader), " ")

    iTemp, err := strconv.ParseInt(ijk[0], 10, 64)
    checkError(err)
    i := int32(iTemp)

    jTemp, err := strconv.ParseInt(ijk[1], 10, 64)
    checkError(err)
    j := int32(jTemp)

    kTemp, err := strconv.ParseInt(ijk[2], 10, 64)
    checkError(err)
    k := int32(kTemp)

    result := beautifulDays(i, j, k)

    fmt.Fprintf(writer, "%d\n", result)

    writer.Flush()
}

func readLine(reader *bufio.Reader) string {
    str, _, err := reader.ReadLine()
    if err == io.EOF {
        return ""
    }

    return strings.TrimRight(string(str), "\r\n")
}

func checkError(err error) {
    if err != nil {
        panic(err)
    }
}
